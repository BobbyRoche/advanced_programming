Robert Roche
Lab 6 Answer Sheet



1.)
	i. List: Sequence of elements of the same type. Elements can be added or removed. The List size can be checked, 
				and you can replace elements. Finally, you may check if the List is empty or full as well.

	ii. Stack: A stack contains elements of the same type in sequence. Stacks operate on a last in first out manner. You can add or remove
				  elements from the top of a stack (push/pop), look at elements in the stack, and check if it is empty or full.
	iii. Queue: Queues contain elements of the same type in sequence. Queues operate on a first in first out basis. Elements can be added
					to (the end) and removed (from the beginning). You can check the size and whether it is empty or ful las well You may also
					peek at elements.
	iv. Dicitonary: Dictionaries contain 2 types of elements. Keys and Values. Values are the data you typically want to use, and keys are used
						 to access them. For example you may have a dictionary of student ID's where the name may be the key and the ID the value. 
						 This allows you to access each ID by name. You may add values and keys to the dictionary, print values, print keys, and print
						 individual values using keys. You may also remove from the dictionary. One way to consider a dictionary is as 2 lists, where
						 one list is a reference to a value in the other list.

2.) log2(n) The binary search will cut the list and see if the value is higher or lower. It will repeat this process until it finds the value.

3.) Worst case for a linear search will have n comparisons. This is because the linear search will go all the way to the final element.

4.) You may want to use a linear search if you do not have a large list, however the most sure fire reason for using a linear 
	 search would be in an unsorted list since for binary searches the list needs to be sorted. 

5.)The following shows the process of choosing each pivot. The numbers are then swapped higher or lower than the pivot.
	The pivot is then placed. The higher and lower numbers are placed in sub arrays and new pivots are chosen. The process
	repeats on the sub arrays.

	 *84* 37 93 82 98 27 63 73 93 27 75 55 45 8
	 *84* 37 8 82 98 27 63 73 93 27 75 55 45 93 
	 *84* 37 8 82 45 27 63 73 93 27 75 55 98 93 
	 *84* 37 8 82 45 27 63 73 55 27 75 93 98 93 
	  37 8 82 45 27 63 73 55 75 84 93 98 93 
	[*37*] 8 82 45 27 63 73 55 75 84 [*93* 98 93] 
	[*37* 8 27 45 82 63 73 55 75] 84 [*93* 93 98] 
	 [8 27 37 45 82 63 73 55 75] 84 [93 93 98] 
	[*8* 27] 37 [*45* 82 63 73 55 75] 84 [*93*] 93 [*98*] 
	  8 27 37 45 [82 63 73 55 75] 84 93 93 98 
	  8 27 37 45 [*82* 63 73 55 75] 84 93 93 98 
	  8 27 37 45 [63 73 55 75] 82 84 93 93 98 
	  8 27 37 45 [*63* 73 55 75] 82 84 93 93 98 
	  8 27 37 45 [*63* 55 73 75] 82 84 93 93 98 
	  8 27 37 45 [55] 63 [73 75] 82 84 93 93 98
	  8 27 37 45 [*55*] 63 [*73* 75] 82 84 93 93 98 
	  8 27 37 45 55 63 73 75 82 84 93 93 98 

6.)3 24 6

7.) [13,[28,[24,[3, None]]]]

8.) First the buffer is initialized. s is then pointed to the char array (buffer). s is appended to
	"...who's never ever been born". This changes the buffer. The buffer is then set back to "on the footsteps of dawn". s is
	set to empty memory. The buffer is then copied to s and s is added to the string "...who's mever ever been born". The outputs are
	different because the buffer is only being pointed to not changed in itself. 

9.) 	3  [Bob,38],[Cos,86]
		4  [Vera,99],[Nash,11],[Kate,28],[Jaga,24]
		5  [Jesse,78]

10.)
int find(char *n, int *p_ans)
{
	entry *tempn, *other;
	int a = hash(n);
	p = table[a];
	while(tempn!=NULL)
	{
		if(tempn->key == n)
		{
			*p_ans = p->val;
			return 1;
		}
	}
	return 0;
}
